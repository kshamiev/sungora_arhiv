// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mdsample

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"sungora/lib/typ"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MinioST is an object representing the database table.
type MinioST struct { // ИД
	ID typ.UUID `boil:"id" db:"id" json:"id" toml:"id" yaml:"id" example:"8ca3c9c3-cf1a-47fe-8723-3f957538ce42"`
	// папка хранения - тип объекта
	Bucket string `boil:"bucket" db:"bucket" json:"bucket" toml:"bucket" yaml:"bucket"`
	// файл хранения - ид объекта
	ObjectID typ.UUID `boil:"object_id" db:"object_id" json:"object_id" toml:"object_id" yaml:"object_id" example:"8ca3c9c3-cf1a-47fe-8723-3f957538ce42"`
	// имя файла
	Name string `boil:"name" db:"name" json:"name" toml:"name" yaml:"name"`
	// тип файла
	FileType string `boil:"file_type" db:"file_type" json:"file_type" toml:"file_type" yaml:"file_type"`
	// размер файла
	FileSize int `boil:"file_size" db:"file_size" json:"file_size" toml:"file_size" yaml:"file_size"`
	// дополнительные параметры файла
	Label null.JSON `boil:"label" db:"label" json:"label,omitempty" toml:"label" yaml:"label,omitempty" swaggertype:"string" example:"JSON"`
	// пользователь
	UserLogin string `boil:"user_login" db:"user_login" json:"user_login" toml:"user_login" yaml:"user_login"`
	// дата и время создания
	CreatedAt time.Time `boil:"created_at" db:"created_at" json:"created_at" toml:"created_at" yaml:"created_at" example:"2006-01-02T15:04:05Z"`
	// подтверждение загрузки
	IsConfirm bool `boil:"is_confirm" db:"is_confirm" json:"is_confirm" toml:"is_confirm" yaml:"is_confirm"`

	R *minioSTR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L minioSTL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MinioSTColumns = struct {
	ID        string
	Bucket    string
	ObjectID  string
	Name      string
	FileType  string
	FileSize  string
	Label     string
	UserLogin string
	CreatedAt string
	IsConfirm string
}{
	ID:        "id",
	Bucket:    "bucket",
	ObjectID:  "object_id",
	Name:      "name",
	FileType:  "file_type",
	FileSize:  "file_size",
	Label:     "label",
	UserLogin: "user_login",
	CreatedAt: "created_at",
	IsConfirm: "is_confirm",
}

var MinioSTTableColumns = struct {
	ID        string
	Bucket    string
	ObjectID  string
	Name      string
	FileType  string
	FileSize  string
	Label     string
	UserLogin string
	CreatedAt string
	IsConfirm string
}{
	ID:        "minio_st.id",
	Bucket:    "minio_st.bucket",
	ObjectID:  "minio_st.object_id",
	Name:      "minio_st.name",
	FileType:  "minio_st.file_type",
	FileSize:  "minio_st.file_size",
	Label:     "minio_st.label",
	UserLogin: "minio_st.user_login",
	CreatedAt: "minio_st.created_at",
	IsConfirm: "minio_st.is_confirm",
}

// Generated where

type whereHelpertyp_UUID struct{ field string }

func (w whereHelpertyp_UUID) EQ(x typ.UUID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertyp_UUID) NEQ(x typ.UUID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertyp_UUID) LT(x typ.UUID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertyp_UUID) LTE(x typ.UUID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertyp_UUID) GT(x typ.UUID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertyp_UUID) GTE(x typ.UUID) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MinioSTWhere = struct {
	ID        whereHelpertyp_UUID
	Bucket    whereHelperstring
	ObjectID  whereHelpertyp_UUID
	Name      whereHelperstring
	FileType  whereHelperstring
	FileSize  whereHelperint
	Label     whereHelpernull_JSON
	UserLogin whereHelperstring
	CreatedAt whereHelpertime_Time
	IsConfirm whereHelperbool
}{
	ID:        whereHelpertyp_UUID{field: "\"minio_st\".\"id\""},
	Bucket:    whereHelperstring{field: "\"minio_st\".\"bucket\""},
	ObjectID:  whereHelpertyp_UUID{field: "\"minio_st\".\"object_id\""},
	Name:      whereHelperstring{field: "\"minio_st\".\"name\""},
	FileType:  whereHelperstring{field: "\"minio_st\".\"file_type\""},
	FileSize:  whereHelperint{field: "\"minio_st\".\"file_size\""},
	Label:     whereHelpernull_JSON{field: "\"minio_st\".\"label\""},
	UserLogin: whereHelperstring{field: "\"minio_st\".\"user_login\""},
	CreatedAt: whereHelpertime_Time{field: "\"minio_st\".\"created_at\""},
	IsConfirm: whereHelperbool{field: "\"minio_st\".\"is_confirm\""},
}

// MinioSTRels is where relationship names are stored.
var MinioSTRels = struct {
}{}

// minioSTR is where relationships are stored.
type minioSTR struct {
}

// NewStruct creates a new relationship struct
func (*minioSTR) NewStruct() *minioSTR {
	return &minioSTR{}
}

// minioSTL is where Load methods for each relationship are stored.
type minioSTL struct{}

var (
	minioSTAllColumns            = []string{"id", "bucket", "object_id", "name", "file_type", "file_size", "label", "user_login", "created_at", "is_confirm"}
	minioSTColumnsWithoutDefault = []string{"bucket", "object_id", "name", "file_type", "label", "user_login"}
	minioSTColumnsWithDefault    = []string{"id", "file_size", "created_at", "is_confirm"}
	minioSTPrimaryKeyColumns     = []string{"id"}
)

type (
	// MinioSTSlice is an alias for a slice of pointers to MinioST.
	// This should almost always be used instead of []MinioST.
	MinioSTSlice []*MinioST
	// MinioSTHook is the signature for custom MinioST hook methods
	MinioSTHook func(context.Context, boil.ContextExecutor, *MinioST) error

	minioSTQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	minioSTType                 = reflect.TypeOf(&MinioST{})
	minioSTMapping              = queries.MakeStructMapping(minioSTType)
	minioSTPrimaryKeyMapping, _ = queries.BindMapping(minioSTType, minioSTMapping, minioSTPrimaryKeyColumns)
	minioSTInsertCacheMut       sync.RWMutex
	minioSTInsertCache          = make(map[string]insertCache)
	minioSTUpdateCacheMut       sync.RWMutex
	minioSTUpdateCache          = make(map[string]updateCache)
	minioSTUpsertCacheMut       sync.RWMutex
	minioSTUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var minioSTBeforeInsertHooks []MinioSTHook
var minioSTBeforeUpdateHooks []MinioSTHook
var minioSTBeforeDeleteHooks []MinioSTHook
var minioSTBeforeUpsertHooks []MinioSTHook

var minioSTAfterInsertHooks []MinioSTHook
var minioSTAfterSelectHooks []MinioSTHook
var minioSTAfterUpdateHooks []MinioSTHook
var minioSTAfterDeleteHooks []MinioSTHook
var minioSTAfterUpsertHooks []MinioSTHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MinioST) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range minioSTBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MinioST) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range minioSTBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MinioST) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range minioSTBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MinioST) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range minioSTBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MinioST) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range minioSTAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MinioST) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range minioSTAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MinioST) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range minioSTAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MinioST) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range minioSTAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MinioST) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range minioSTAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMinioSTHook registers your hook function for all future operations.
func AddMinioSTHook(hookPoint boil.HookPoint, minioSTHook MinioSTHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		minioSTBeforeInsertHooks = append(minioSTBeforeInsertHooks, minioSTHook)
	case boil.BeforeUpdateHook:
		minioSTBeforeUpdateHooks = append(minioSTBeforeUpdateHooks, minioSTHook)
	case boil.BeforeDeleteHook:
		minioSTBeforeDeleteHooks = append(minioSTBeforeDeleteHooks, minioSTHook)
	case boil.BeforeUpsertHook:
		minioSTBeforeUpsertHooks = append(minioSTBeforeUpsertHooks, minioSTHook)
	case boil.AfterInsertHook:
		minioSTAfterInsertHooks = append(minioSTAfterInsertHooks, minioSTHook)
	case boil.AfterSelectHook:
		minioSTAfterSelectHooks = append(minioSTAfterSelectHooks, minioSTHook)
	case boil.AfterUpdateHook:
		minioSTAfterUpdateHooks = append(minioSTAfterUpdateHooks, minioSTHook)
	case boil.AfterDeleteHook:
		minioSTAfterDeleteHooks = append(minioSTAfterDeleteHooks, minioSTHook)
	case boil.AfterUpsertHook:
		minioSTAfterUpsertHooks = append(minioSTAfterUpsertHooks, minioSTHook)
	}
}

// One returns a single minioST record from the query.
func (q minioSTQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MinioST, error) {
	o := &MinioST{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdsample: failed to execute a one query for minio_st")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MinioST records from the query.
func (q minioSTQuery) All(ctx context.Context, exec boil.ContextExecutor) (MinioSTSlice, error) {
	var o []*MinioST

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mdsample: failed to assign all query results to MinioST slice")
	}

	if len(minioSTAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MinioST records in the query.
func (q minioSTQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: failed to count minio_st rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q minioSTQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mdsample: failed to check if minio_st exists")
	}

	return count > 0, nil
}

// MinioSTS retrieves all the records using an executor.
func MinioSTS(mods ...qm.QueryMod) minioSTQuery {
	mods = append(mods, qm.From("\"minio_st\""))
	return minioSTQuery{NewQuery(mods...)}
}

// FindMinioST retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMinioST(ctx context.Context, exec boil.ContextExecutor, iD typ.UUID, selectCols ...string) (*MinioST, error) {
	minioSTObj := &MinioST{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"minio_st\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, minioSTObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdsample: unable to select from minio_st")
	}

	if err = minioSTObj.doAfterSelectHooks(ctx, exec); err != nil {
		return minioSTObj, err
	}

	return minioSTObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MinioST) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mdsample: no minio_st provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(minioSTColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	minioSTInsertCacheMut.RLock()
	cache, cached := minioSTInsertCache[key]
	minioSTInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			minioSTAllColumns,
			minioSTColumnsWithDefault,
			minioSTColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(minioSTType, minioSTMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(minioSTType, minioSTMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"minio_st\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"minio_st\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "mdsample: unable to insert into minio_st")
	}

	if !cached {
		minioSTInsertCacheMut.Lock()
		minioSTInsertCache[key] = cache
		minioSTInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MinioST.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MinioST) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	minioSTUpdateCacheMut.RLock()
	cache, cached := minioSTUpdateCache[key]
	minioSTUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			minioSTAllColumns,
			minioSTPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("mdsample: unable to update minio_st, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"minio_st\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, minioSTPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(minioSTType, minioSTMapping, append(wl, minioSTPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: unable to update minio_st row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: failed to get rows affected by update for minio_st")
	}

	if !cached {
		minioSTUpdateCacheMut.Lock()
		minioSTUpdateCache[key] = cache
		minioSTUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q minioSTQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: unable to update all for minio_st")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: unable to retrieve rows affected for minio_st")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MinioSTSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mdsample: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), minioSTPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"minio_st\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, minioSTPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: unable to update all in minioST slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: unable to retrieve rows affected all in update all minioST")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MinioST) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mdsample: no minio_st provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(minioSTColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	minioSTUpsertCacheMut.RLock()
	cache, cached := minioSTUpsertCache[key]
	minioSTUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			minioSTAllColumns,
			minioSTColumnsWithDefault,
			minioSTColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			minioSTAllColumns,
			minioSTPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("mdsample: unable to upsert minio_st, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(minioSTPrimaryKeyColumns))
			copy(conflict, minioSTPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"minio_st\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(minioSTType, minioSTMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(minioSTType, minioSTMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "mdsample: unable to upsert minio_st")
	}

	if !cached {
		minioSTUpsertCacheMut.Lock()
		minioSTUpsertCache[key] = cache
		minioSTUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MinioST record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MinioST) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mdsample: no MinioST provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), minioSTPrimaryKeyMapping)
	sql := "DELETE FROM \"minio_st\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: unable to delete from minio_st")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: failed to get rows affected by delete for minio_st")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q minioSTQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mdsample: no minioSTQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: unable to delete all from minio_st")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: failed to get rows affected by deleteall for minio_st")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MinioSTSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(minioSTBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), minioSTPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"minio_st\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, minioSTPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: unable to delete all from minioST slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdsample: failed to get rows affected by deleteall for minio_st")
	}

	if len(minioSTAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MinioST) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMinioST(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MinioSTSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MinioSTSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), minioSTPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"minio_st\".* FROM \"minio_st\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, minioSTPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mdsample: unable to reload all in MinioSTSlice")
	}

	*o = slice

	return nil
}

// MinioSTExists checks if the MinioST row exists.
func MinioSTExists(ctx context.Context, exec boil.ContextExecutor, iD typ.UUID) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"minio_st\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mdsample: unable to check if minio_st exists")
	}

	return exists, nil
}
